@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components
@inject IJSRuntime jsRuntime
<div @ref="divCanvas" @onclick="@(evt => MouseEvent(evt, MouseEventTypes.Click))"
     @onmousedown="@(evt => MouseEvent(evt, MouseEventTypes.Down))"
     @onmousemove="@(evt => MouseEvent(evt, MouseEventTypes.Move))"
     @onmouseout="@(evt => MouseEvent(evt, MouseEventTypes.Out))"
     @onmouseover="@(evt => MouseEvent(evt, MouseEventTypes.Over))"
     @onmouseup="@(evt => MouseEvent(evt, MouseEventTypes.Up))"
     @onmousewheel="@(evt => MouseEvent(evt, MouseEventTypes.Wheel))"
     @onkeydown="(evt => KeyboardEvent(evt, KeyboardEventTypes.KeyDown))"
     @onkeyup="(evt => KeyboardEvent(evt, KeyboardEventTypes.KeyUp))"
     @onkeypress="(evt => KeyboardEvent(evt, KeyboardEventTypes.KeyPress))"
     tabindex="0"
     style="border-style:none;margin:0 0 0 0;padding:0 0 0 0;">
</div>
@code {
    private ElementReference divCanvas;
    private static bool renderOnce = false;

    [Parameter]
    public string? Id { get; set; }

    [Parameter]
    public Window.AsyncWindowDraw? DrawWindow { get; set; }

    public Helpers.CanvasComponentInfo? CanvasComponentInfo = new();

    public WindowManager WindowManager = null!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(!renderOnce) renderOnce = true;
        else return;
        if(CanvasComponentInfo is null) CanvasComponentInfo = new();
        if (Id is null) Id = Guid.NewGuid().ToString();
        CanvasComponentInfo.Id = Id;
        CanvasComponentInfo.Canvas = new(jsRuntime);
        await CanvasComponentInfo.Canvas.CreateCanvas(divCanvas, $"EpicAkS.Blazor.Canvas.{Id}");
        await CanvasComponentInfo.Canvas.SetCurrentCanvas2DContext();
        Helpers.CanvasComponentInfos.Add(CanvasComponentInfo);
        WindowManager = new(CanvasComponentInfo);
        WindowManager.RootWindow.Draw += DrawWindow;
        await base.OnAfterRenderAsync(firstRender);
        await Render();
    }

    private async Task MouseEvent(MouseEventArgs eventArgs, MouseEventTypes mouseEventType)
    {
        if (CanvasComponentInfo?.Canvas is not null)
        {
            MouseCoords mouseCoords = await CanvasComponentInfo.Canvas.GetMouseCoords(eventArgs, mouseEventType);
            await WindowManager.DoMouseEvents(mouseCoords, mouseEventType);
        }
    }

    private async Task KeyboardEvent(KeyboardEventArgs eventArgs, KeyboardEventTypes keyboardEventType)
    {
        if (CanvasComponentInfo?.Canvas is not null)
        {
            await WindowManager.DoKeyboardEvents(keyboardEventType, eventArgs);
        }
    }

    public async Task Render()
    {
        if (CanvasComponentInfo?.Canvas is not null && CanvasComponentInfo.Canvas.CanvasWidthHeightProp is not null)
        {
            await CanvasComponentInfo.Canvas.ClearRect(0, 0, CanvasComponentInfo.Canvas.CanvasWidthHeightProp.Value.Width, 
                CanvasComponentInfo.Canvas.CanvasWidthHeightProp.Value.Height);
            await WindowManager.DrawWindows();
        }
    }
}
