@using static EpicAkS.Blazor.Canvas.Components.Helpers
@code {
    public Window? LabelWindow { get; set; }

    [Parameter]
    public string Id { get; set; } = string.Empty;

    [Parameter]
    public int X { get; set; }

    [Parameter]
    public int Y { get; set; }

    [Parameter]
    public int Width { get; set; } = 100;

    [Parameter]
    public int Height { get; set; } = 50;

    [Parameter]
    public string Text { get; set; } = "Button";

    [Parameter]
    public string TextColor { get; set; } = "white";

    [Parameter]
    public string TextFont { get; set; } = "20px serif";

    [Parameter]
    public int TextFontHeight { get; set; } = 20;

    [Parameter]
    public string? BackgroundColor { get; set; } = "red";

    [Parameter]
    public CanvasComponent? CanvasComponent { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        LabelWindow = new Window { Id = this.Id, X = this.X, Y = this.Y, Width = this.Width, Height = this.Height };
        CanvasComponent?.WindowManager.AddWindow(LabelWindow);
        LabelWindow.Draw += DrawLabel;
        await base.OnAfterRenderAsync(firstRender);
    }

    public async Task DrawLabel(CanvasComponentInfo canvasComponentInfo)
    {
        CanvasClass? canvas = canvasComponentInfo?.Canvas;
        if (canvas is not null)
        {
            await canvas.ClearRect(X, Y, Width, Height);
            await canvas.SetFillStyle(BackgroundColor ?? "white");
            await canvas.FillRect(X, Y, Width, Height);
            await canvas.SetFillStyle(TextColor);
            await canvas.SetFont(TextFont);
            TextMetrics? textMetrics = await canvas.MeasureTextAndReturnNewTextMetrics(Text);
            if (textMetrics is not null)
                await canvas.FillText(Text, X + ((Width - (int)textMetrics.Width) / 2), Y + Height - TextFontHeight);
        }
    }
}
