@page "/"
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components
@using static EpicAkS.Blazor.Canvas.Components.Helpers;
<CanvasComponent @ref="canvasComponent" Id="@Id" DrawWindow="@DrawWindow">
    <EpicAkS.Blazor.Canvas.Components.BasicControls.Button X="10" Y="500" Width="100" Height="50" Text="Button" ButtonColor="blue" CanvasComponent="@canvasComponent"
        MouseClick="@ButtonClick">
    </EpicAkS.Blazor.Canvas.Components.BasicControls.Button>
</CanvasComponent>
@code {
    string Id = Guid.NewGuid().ToString();
    private CanvasComponent? canvasComponent;

    private async Task MyKeyPress(KeyboardEventTypes keyboardEventType, KeyboardEventArgs keyboardEventArgs)
    {
        if (canvasComponent?.CanvasComponentInfo?.Canvas is not null)
            await canvasComponent.CanvasComponentInfo.Canvas.StrokeRect(100, 100, 200, 200);
    }

    private async Task ButtonClick(MouseCoords mouseCoords)
    {
        if (canvasComponent?.CanvasComponentInfo?.Canvas is not null)
            await canvasComponent.CanvasComponentInfo.Canvas.StrokeRect((int)mouseCoords.OffsetLeft, (int)mouseCoords.OffsetTop, 200, 200);
    }

    private async Task DrawWindow(EpicAkS.Blazor.Canvas.Components.Helpers.CanvasComponentInfo canvasComponentInfo)
    {
        //CanvasComponentInfo? canvasComponentInfo = EpicAkS.Blazor.Canvas.Components.Helpers.GetCanvasComponentInfoByIdGuid(Id);
        if (canvasComponent is not null)
        {
            canvasComponent.WindowManager.RootWindow.KeyboardEvents.KeyPress += MyKeyPress;
        }
        if (canvasComponentInfo?.Canvas is not null)
        {
            CanvasClass canvas = canvasComponentInfo.Canvas;
            await canvas.ClearRect(0, 0, canvas.CanvasWidthHeightProp?.Width ?? 100,
                canvas.CanvasWidthHeightProp?.Height ?? 100);

            await canvas.SetFillStyle("rgba(255, 165, 0, 0.25)");
            await canvas.FillRect(10, 10, 100, 100);

            //Testing variable logic
            TextMetrics? textMetrics = await canvas.MeasureTextAndReturnNewTextMetrics("akshay");
            TextMetrics textMetrics2 = await canvas.GetTextMetric(textMetrics);
            TextMetrics textMetrics3 = await canvas.GetTextMetric(textMetrics2);

            //Testing enum logic
            await canvas.SetLineWidth(20);
            await canvas.SetLineJoin(LineJoinTypes.round);
            if (await canvas.GetLineJoin() == LineJoinTypes.round)
            {
                await canvas.BeginPath();
                await canvas.MoveTo(220, 20);
                await canvas.LineTo(390, 100);
                await canvas.LineTo(480, 20);
                await canvas.LineTo(480, 150);
                await canvas.Stroke();
            }

            //Testing class type vars ex. CanvasGradient
            Gradient gradient = new(canvas);
            await gradient.CreateConicGradient(0, 120, 320);
            await gradient.AddColorStop(0, "red");
            await gradient.AddColorStop(0.25, "orange");
            await gradient.AddColorStop(0.5, "yellow");
            await gradient.AddColorStop(0.75, "green");
            await gradient.AddColorStop(1, "blue");
            await canvas.SetFillStyleWithCanvasGradient(gradient);
            await canvas.FillRect(20, 220, 200, 200);

            Path2D path2D = new(canvas);
            await path2D.CreatePath2D();
            await path2D.Rect(300, 300, 100, 100);
            await canvas.SetFillStyle("magenta");
            await canvas.Fill(path2D);
        }
    }
}
