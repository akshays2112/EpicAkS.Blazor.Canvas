@page "/"
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components
<EpicAkSBlazorCanvasComponent Id="@Id" CallOnRender="@InitDraw"></EpicAkSBlazorCanvasComponent>
@code {
    string Id = Guid.NewGuid().ToString();
    Helpers.EpicAkSBlazorCanvasComponentInfo? epicAkSBlazorCanvasComponentInfo;

    private void MyMouseClick(MouseCoords mouseCoords)
    {
        if(epicAkSBlazorCanvasComponentInfo?.EpicAkSBlazorCanvas is not null) epicAkSBlazorCanvasComponentInfo.EpicAkSBlazorCanvas.StrokeRect(500, 500, 200, 200).Wait();
    }

    private async Task InitDraw()
    {
        epicAkSBlazorCanvasComponentInfo = Helpers.GetEpicAkSBlazorCanvasComponentInfoByIdGuid(Id);
        if (epicAkSBlazorCanvasComponentInfo is not null) epicAkSBlazorCanvasComponentInfo.EpicAkSBlazorCanvasComponentMouseEvents.MouseClick += MyMouseClick;
        if (epicAkSBlazorCanvasComponentInfo?.EpicAkSBlazorCanvas is not null)
        {
            await epicAkSBlazorCanvasComponentInfo.EpicAkSBlazorCanvas.ClearRect(0, 0, epicAkSBlazorCanvasComponentInfo.EpicAkSBlazorCanvas.CanvasWidthHeightProp?.Width ?? 100, 
                epicAkSBlazorCanvasComponentInfo.EpicAkSBlazorCanvas.CanvasWidthHeightProp?.Height ?? 100);

            await epicAkSBlazorCanvasComponentInfo.EpicAkSBlazorCanvas.SetFillStyle("rgba(255, 165, 0, 0.25)");
            await epicAkSBlazorCanvasComponentInfo.EpicAkSBlazorCanvas.FillRect(10, 10, 100, 100);

            //Testing variable logic
            EpicAkSTextMetrics? textMetrics = await epicAkSBlazorCanvasComponentInfo.EpicAkSBlazorCanvas.MeasureTextAndReturnNewTextMetrics("akshay");
            EpicAkSTextMetrics? textMetrics2 = null;
            if (textMetrics is not null)
                textMetrics2 = await epicAkSBlazorCanvasComponentInfo.EpicAkSBlazorCanvas.GetTextMetric(textMetrics);
            EpicAkSTextMetrics? textMetrics3;
            if (textMetrics2 is not null)
                textMetrics3 = await epicAkSBlazorCanvasComponentInfo.EpicAkSBlazorCanvas.GetTextMetric(textMetrics2);

            //Testing enum logic
            await epicAkSBlazorCanvasComponentInfo.EpicAkSBlazorCanvas.SetLineWidth(20);
            await epicAkSBlazorCanvasComponentInfo.EpicAkSBlazorCanvas.SetLineJoin(LineJoinTypes.round);
            if (await epicAkSBlazorCanvasComponentInfo.EpicAkSBlazorCanvas.GetLineJoin() == LineJoinTypes.round)
            {
                await epicAkSBlazorCanvasComponentInfo.EpicAkSBlazorCanvas.BeginPath();
                await epicAkSBlazorCanvasComponentInfo.EpicAkSBlazorCanvas.MoveTo(220, 20);
                await epicAkSBlazorCanvasComponentInfo.EpicAkSBlazorCanvas.LineTo(390, 100);
                await epicAkSBlazorCanvasComponentInfo.EpicAkSBlazorCanvas.LineTo(480, 20);
                await epicAkSBlazorCanvasComponentInfo.EpicAkSBlazorCanvas.LineTo(480, 150);
                await epicAkSBlazorCanvasComponentInfo.EpicAkSBlazorCanvas.Stroke();
            }

            //Testing class type vars ex. CanvasGradient
            EpicAkSGradient gradient = new(epicAkSBlazorCanvasComponentInfo.EpicAkSBlazorCanvas);
            await gradient.CreateConicGradient(0, 120, 320);
            await gradient.AddColorStop(0, "red");
            await gradient.AddColorStop(0.25, "orange");
            await gradient.AddColorStop(0.5, "yellow");
            await gradient.AddColorStop(0.75, "green");
            await gradient.AddColorStop(1, "blue");
            await epicAkSBlazorCanvasComponentInfo.EpicAkSBlazorCanvas.SetFillStyleWithCanvasGradient(gradient);
            await epicAkSBlazorCanvasComponentInfo.EpicAkSBlazorCanvas.FillRect(20, 220, 200, 200);

            EpicAkSPath2D path2D = new(epicAkSBlazorCanvasComponentInfo.EpicAkSBlazorCanvas);
            await path2D.CreatePath2D();
            await path2D.Rect(300, 300, 100, 100);
            await epicAkSBlazorCanvasComponentInfo.EpicAkSBlazorCanvas.SetFillStyle("magenta");
            await epicAkSBlazorCanvasComponentInfo.EpicAkSBlazorCanvas.Fill(path2D);
        }
    }
}
