@page "/"
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components
@using EpicAkS.Blazor.Canvas.Components
@using EpicAkS.Blazor.Canvas.Structs
@using EpicAkS.Blazor.Canvas.Enums
@using EpicAkS.Blazor.Canvas
@using EpicAkS.Blazor.Canvas.Components.BasicControls
@using EpicAkS.Blazor.Canvas.Components.BasicControls.Classes
@using static EpicAkS.Blazor.Canvas.Components.Helpers;
<CanvasComponent @ref="canvasComponent" Id="@Id" DrawWindow="@DrawWindow">
    <Button Id="TestButton1" X="10" Y="600" Width="100" Height="50" Text="Button" ButtonColor="blue" 
        CanvasComponent="@canvasComponent" MouseClick="@ButtonClick" KeyPress="@MyKeyPress" />
    <Label Id="TestLabel1" X="10" Y="680" Width="100" Height="20" Text="Label" BackgroundColor="white" 
        TextColor="black" TextFont="bold 20px Ariel" TextFontHeight=10 CanvasComponent="@canvasComponent" />
    <ListBox Id="TestListBox1" X="800" Y="10" Width="300" Height="200" BackgroundColor="lightblue" 
        Items="@listBoxItems" OnMouseClick="@TestListBox1MouseClick" CanvasComponent="@canvasComponent" />
</CanvasComponent>
<img @ref="imgRef" src="64x64.jpg" style="display:none;" />
@code {
    private string Id = Guid.NewGuid().ToString();
    private CanvasComponent? canvasComponent;
    private ElementReference imgRef;
    private List<ListBoxItem> listBoxItems = new()
    {
        new ListBoxItem { Width = 300, Height = 20, BackgroundColor = "lightgreen", Text = "Item 1", 
            TextColor = "black", TextFont = "12px Tahoma", TextFontHeight = 12 },
        new ListBoxItem { Width = 300, Height = 20, BackgroundColor = "lightgreen", Text = "Item 2",
            TextColor = "black", TextFont = "12px Tahoma", TextFontHeight = 12 },
        new ListBoxItem { Width = 300, Height = 20, BackgroundColor = "lightgreen", Text = "Item 3",
            TextColor = "black", TextFont = "12px Tahoma", TextFontHeight = 12 },
        new ListBoxItem { Width = 300, Height = 20, BackgroundColor = "lightgreen", Text = "Item 4",
            TextColor = "black", TextFont = "12px Tahoma", TextFontHeight = 12 },
        new ListBoxItem { Width = 300, Height = 20, BackgroundColor = "lightgreen", Text = "Item 5",
            TextColor = "black", TextFont = "12px Tahoma", TextFontHeight = 12 },
        new ListBoxItem { Width = 300, Height = 20, BackgroundColor = "lightgreen", Text = "Item 6",
            TextColor = "black", TextFont = "12px Tahoma", TextFontHeight = 12 },
        new ListBoxItem { Width = 300, Height = 20, BackgroundColor = "lightgreen", Text = "Item 7",
            TextColor = "black", TextFont = "12px Tahoma", TextFontHeight = 12 },
        new ListBoxItem { Width = 300, Height = 20, BackgroundColor = "lightgreen", Text = "Item 8",
            TextColor = "black", TextFont = "12px Tahoma", TextFontHeight = 12 },
        new ListBoxItem { Width = 300, Height = 20, BackgroundColor = "lightgreen", Text = "Item 9",
            TextColor = "black", TextFont = "12px Tahoma", TextFontHeight = 12 },
        new ListBoxItem { Width = 300, Height = 20, BackgroundColor = "lightgreen", Text = "Item 10",
            TextColor = "black", TextFont = "12px Tahoma", TextFontHeight = 12 },
        new ListBoxItem { Width = 300, Height = 20, BackgroundColor = "lightgreen", Text = "Item 11",
            TextColor = "black", TextFont = "12px Tahoma", TextFontHeight = 12 },
        new ListBoxItem { Width = 300, Height = 20, BackgroundColor = "lightgreen", Text = "Item 12",
            TextColor = "black", TextFont = "12px Tahoma", TextFontHeight = 12 },
        new ListBoxItem { Width = 300, Height = 20, BackgroundColor = "lightgreen", Text = "Item 13",
            TextColor = "black", TextFont = "12px Tahoma", TextFontHeight = 12 },
        new ListBoxItem { Width = 300, Height = 20, BackgroundColor = "lightgreen", Text = "Item 14",
            TextColor = "black", TextFont = "12px Tahoma", TextFontHeight = 12 },
        new ListBoxItem { Width = 300, Height = 20, BackgroundColor = "lightgreen", Text = "Item 15",
            TextColor = "black", TextFont = "12px Tahoma", TextFontHeight = 12 },
        new ListBoxItem { Width = 300, Height = 20, BackgroundColor = "lightgreen", Text = "Item 16",
            TextColor = "black", TextFont = "12px Tahoma", TextFontHeight = 12 },
        new ListBoxItem { Width = 300, Height = 20, BackgroundColor = "lightgreen", Text = "Item 17",
            TextColor = "black", TextFont = "12px Tahoma", TextFontHeight = 12 },
        new ListBoxItem { Width = 300, Height = 20, BackgroundColor = "lightgreen", Text = "Item 18",
            TextColor = "black", TextFont = "12px Tahoma", TextFontHeight = 12 },
        new ListBoxItem { Width = 300, Height = 20, BackgroundColor = "lightgreen", Text = "Item 19",
            TextColor = "black", TextFont = "12px Tahoma", TextFontHeight = 12 },
        new ListBoxItem { Width = 300, Height = 20, BackgroundColor = "lightgreen", Text = "Item 20",
            TextColor = "black", TextFont = "12px Tahoma", TextFontHeight = 12 },
        new ListBoxItem { Width = 300, Height = 20, BackgroundColor = "lightgreen", Text = "Item 21",
            TextColor = "black", TextFont = "12px Tahoma", TextFontHeight = 12 }
    };

    private async Task MyKeyPress(KeyboardEventTypes keyboardEventType, KeyboardEventArgs keyboardEventArgs)
    {
        CanvasClass? canvas = canvasComponent?.CanvasComponentInfo?.Canvas;
        if (canvas is not null)
        {
            await canvas.StrokeRect(100, 100, 200, 200);
        }
    }

    private async Task ButtonClick(MouseCoords mouseCoords)
    {
        CanvasClass? canvas = canvasComponent?.CanvasComponentInfo?.Canvas;
        if (canvas is not null)
            await canvas.StrokeRect((int)mouseCoords.OffsetLeft, (int)mouseCoords.OffsetTop, 200, 200);
    }

    private async Task TestListBox1MouseClick(MouseCoords mouseCoords, ListBoxItem listBoxItem)
    {
        CanvasClass? canvas = canvasComponent?.CanvasComponentInfo?.Canvas;
        if (canvas is not null)
        {
            await canvas.FillText($"TestListBox1MouseClick: {listBoxItem.Text}", 600, 50);
        }
    }

    public async Task DrawWindow(CanvasComponentInfo canvasComponentInfo)
    {
        if (canvasComponentInfo?.Canvas is not null)
        {
            CanvasClass canvas = canvasComponentInfo.Canvas;
            await canvas.ClearRect(0, 0, canvas.CanvasWidthHeightProp?.Width ?? 100,
                canvas.CanvasWidthHeightProp?.Height ?? 100);

            #region Drawing Rectangles
            await canvas.FillRect(10, 10, 50, 50);
            await canvas.ClearRect(40, 40, 10, 10);
            await canvas.StrokeRect(10, 70, 50, 50);
            #endregion

            #region Drawing Text
            await canvas.FillText("MAUI", 70, 20);
            await canvas.StrokeText("MAUI", 70, 50);
            TextMetrics? textMetrics = await canvas.MeasureTextAndReturnNewTextMetrics("MAUI");
            await canvas.FillText($"TextMetrics: {textMetrics?.Width}  VarId: {textMetrics?.VarIdString}", 70, 80);
            if (textMetrics is not null)
            {
                TextMetrics? textMetrics1 = await canvas.GetTextMetric(textMetrics);
                await canvas.FillText($"TextMetrics: {textMetrics?.Width}  VarId: {textMetrics1?.VarIdString}", 70, 110);
            }
            TextMetrics? textMetrics2 = await canvas.MeasureTextAndReturnNewFilledTextMetrics("MAUI");
            if (textMetrics2 is not null)
            {
                await canvas.FillText($"TextMetrics: {textMetrics2?.Width}  VarId: {textMetrics2?.VarIdString}", 70, 140);
            }
            #endregion

            #region Line styles
            double? lineWidth = await canvas.GetLineWidth();
            await canvas.FillText($"LineWidth: {lineWidth}", 70, 170);
            await canvas.SetLineWidth(5);
            double? lineWidth1 = await canvas.GetLineWidth();
            await canvas.FillText($"LineWidth: {lineWidth1}", 70, 200);
            await canvas.SetLineWidth(1);
            LineCapTypes? lineCap = await canvas.GetLineCap();
            await canvas.FillText($"LineCap: {lineCap}", 70, 230);
            await canvas.SetLineCap(LineCapTypes.square);
            LineCapTypes? lineCap1 = await canvas.GetLineCap();
            await canvas.FillText($"LineCap: {lineCap1}", 70, 260);
            LineJoinTypes? lineJoin = await canvas.GetLineJoin();
            await canvas.FillText($"LineJoin: {lineJoin}", 70, 290);
            await canvas.SetLineJoin(LineJoinTypes.round);
            LineJoinTypes? lineJoin1 = await canvas.GetLineJoin();
            await canvas.FillText($"LineJoin: {lineJoin1}", 70, 320);
            double? miterLimit = await canvas.GetMiterLimit();
            await canvas.FillText($"MiterLimit: {miterLimit}", 70, 350);
            await canvas.SetMiterLimit(2);
            double? miterLimit1 = await canvas.GetMiterLimit();
            await canvas.FillText($"MiterLimit: {miterLimit1}", 70, 380);
            int?[]? lineDashes = await canvas.GetLineDash();
            if(lineDashes is not null)
                await canvas.FillText($"LineDashes: {{ {string.Join(", ", lineDashes)} }}", 70, 410);
            await canvas.SetLineDash(new int?[] { 10, 20 });
            int?[]? lineDashes1 = await canvas.GetLineDash();
            if(lineDashes1 is not null)
                await canvas.FillText($"LineDashes: {{ {string.Join(", ", lineDashes1)} }}", 70, 440);
            await canvas.SetLineDash(lineDashes);
            double? lineDashOffset = await canvas.GetLineDashOffset();
            await canvas.FillText($"LineDashOffset: {lineDashOffset}", 70, 470);
            await canvas.SetLineDashOffset(5);
            double? lineDashOffset1 = await canvas.GetLineDashOffset();
            await canvas.FillText($"LineDashOffset: {lineDashOffset1}", 70, 500);
            await canvas.SetLineDashOffset(lineDashOffset);
            #endregion

            #region Text styles
            string? fontString = await canvas.GetFont();
            await canvas.FillText($"Font: {fontString}", 400, 20);
            await canvas.SetFont("10px Arial");
            string? fontString1 = await canvas.GetFont();
            await canvas.FillText($"Font: {fontString1}", 400, 50);
            TextAlignTypes? textAlign = await canvas.GetTextAlign();
            await canvas.FillText($"TextAlign: {textAlign}", 400, 80);
            await canvas.SetTextAlign(TextAlignTypes.left);
            TextAlignTypes? textAlign1 = await canvas.GetTextAlign();
            await canvas.FillText($"TextAlign: {textAlign1}", 400, 110);
            TextBaselineTypes? textBaseline = await canvas.GetTextBaseline();
            await canvas.FillText($"TextBaseline: {textBaseline}", 400, 140);
            await canvas.SetTextBaseline(TextBaselineTypes.bottom);
            TextBaselineTypes? textBaseline1 = await canvas.GetTextBaseline();
            await canvas.FillText($"TextBaseline: {textBaseline1}", 400, 170);
            await canvas.SetTextBaseline(textBaseline);
            DirectionTypes? directionType = await canvas.GetDirection();
            await canvas.FillText($"Direction: {directionType}", 400, 200);
            await canvas.SetDirection(DirectionTypes.ltr);
            DirectionTypes? directionType1 = await canvas.GetDirection();
            await canvas.FillText($"Direction: {directionType1}", 400, 230);
            #endregion

            #region Fill and stroke styles
            Gradient? gradient = new Gradient(canvas);
            await gradient.CreateConicGradient(45, 400, 260);
            await gradient.AddColorStop(0, "red");
            await gradient.AddColorStop(0.5, "green");
            await gradient.AddColorStop(1, "blue");
            await canvas.SetFillStyleWithCanvasGradient(gradient);
            await canvas.FillText($"Gradient set for fill style.", 400, 260);
            await canvas.SetFillStyle("red");
            string? fillStyle1 = await canvas.GetFillStyle();
            await canvas.FillText($"FillStyle: {fillStyle1}", 400, 290);
            await canvas.SetStrokeStyleWithCanvasGradient(gradient);
            await canvas.FillText($"Gradient set for stroke style.", 400, 320);
            await canvas.SetStrokeStyle("green");
            string? strokeStyle1 = await canvas.GetStrokeStyle();
            await canvas.FillText($"StrokeStyle: {strokeStyle1}", 400, 350);
            #endregion

            #region Shadows
            int? shadowBlur = await canvas.GetShadowBlur();
            await canvas.FillText($"ShadowBlur: {shadowBlur}", 400, 380);
            await canvas.SetShadowBlur(5);
            int? shadowBlur1 = await canvas.GetShadowBlur();
            await canvas.FillText($"ShadowBlur: {shadowBlur1}", 400, 410);
            string? shadowColor = await canvas.GetShadowColor();
            await canvas.FillText($"ShadowColor: {shadowColor}", 400, 440);
            await canvas.SetShadowColor("blue");
            string? shadowColor1 = await canvas.GetShadowColor();
            await canvas.FillText($"ShadowColor: {shadowColor1}", 400, 470);
            double? shadowOffsetX = await canvas.GetShadowOffsetX();
            await canvas.FillText($"ShadowOffsetX: {shadowOffsetX}", 400, 500);
            await canvas.SetShadowOffsetX(5);
            double? shadowOffsetX1 = await canvas.GetShadowOffsetX();
            await canvas.FillText($"ShadowOffsetX: {shadowOffsetX1}", 400, 530);
            double? shadowOffsetY = await canvas.GetShadowOffsetY();
            await canvas.FillText($"ShadowOffsetY: {shadowOffsetY}", 400, 560);
            await canvas.SetShadowOffsetY(5);
            double? shadowOffsetY1 = await canvas.GetShadowOffsetY();
            await canvas.FillText($"ShadowOffsetY: {shadowOffsetY1}", 400, 590);
            await canvas.SetShadowColor(shadowColor);
            await canvas.SetShadowOffsetX((float?)shadowOffsetX);
            await canvas.SetShadowOffsetY((float?)shadowOffsetY);
            #endregion

            #region Paths
            await canvas.BeginPath();
            await canvas.MoveTo(10, 130);
            await canvas.LineTo(10, 150);
            await canvas.BezierCurveTo(30, 100, 30, 180, 30, 210);
            await canvas.QuadraticCurveTo(50, 230, 30, 250);
            await canvas.Arc(10, 150, 10, 0, 0, false);
            await canvas.ArcTo(10, 150, 20, 170, 10);
            await canvas.ClosePath();
            await canvas.Stroke();
            #endregion

            #region Drawing paths
            await canvas.BeginPath();
            await canvas.MoveTo(10, 310);
            await canvas.LineTo(35, 270);
            await canvas.LineTo(50, 220);
            await canvas.ClosePath();
            await canvas.Fill();
            await canvas.SetFillStyle("#FFFF00");
            await canvas.Fill(FillRuleTypes.evenodd);
            await canvas.SetFillStyle("#FF00FF");
            await canvas.Stroke();
            Path2D? path2D = new Path2D(canvas);
            await path2D.CreatePath2D();
            await path2D.MoveTo(10, 320);
            await path2D.LineTo(50, 320);
            await path2D.LineTo(50, 370);
            await path2D.ClosePath();
            await canvas.SetFillStyle("#00FFFF");
            await canvas.Fill(path2D);
            await canvas.SetFillStyle("#56C6A0");
            await canvas.Fill(path2D, FillRuleTypes.evenodd);
            await canvas.SetFillStyle("#00FF00");
            await canvas.Stroke(path2D);
            await canvas.BeginPath();
            await canvas.MoveTo(10, 310);
            await canvas.LineTo(35, 270);
            await canvas.LineTo(50, 220);
            await canvas.ClosePath();
            await canvas.ScrollPathIntoView();
            await canvas.ScrollPathIntoView(path2D);
            await canvas.BeginPath();
            await canvas.MoveTo(10, 380);
            await canvas.LineTo(50, 380);
            await canvas.LineTo(35, 430);
            await canvas.ClosePath();
            await canvas.Save();
            await canvas.Clip();
            await canvas.SetFillStyle("#FF0000");
            await canvas.FillRect(10, 380, 20, 20);
            await canvas.Restore();
            await canvas.SetFillStyle("#000078");
            await canvas.FillRect(30, 380, 20, 20);
            Path2D? path2D1 = new Path2D(canvas);
            await path2D1.CreatePath2D();
            await path2D1.MoveTo(10, 440);
            await path2D1.LineTo(50, 440);
            await path2D1.LineTo(50, 490);
            await path2D1.ClosePath();
            bool? isPointInPath = await canvas.IsPointInPath(path2D1, 30, 450);
            await canvas.FillText($"IsPointInPath: {isPointInPath}", 400, 620);
            bool? isPointInPath1 = await canvas.IsPointInStroke(path2D1, 30, 440);
            await canvas.FillText($"IsPointInStroke: {isPointInPath1}", 400, 650);
            #endregion

            #region Transformations
            DOMMatrix? domMatrix = await canvas.GetTransform();
            await canvas.FillText($"DOMMatrix: [ {domMatrix?.a}, {domMatrix?.b}, {domMatrix?.c}, {domMatrix?.d}, {domMatrix?.e}, {domMatrix?.f} ]", 400, 680);
            await canvas.Save();
            await canvas.Rotate((45 * Math.PI) / 180);
            await canvas.Scale(1.5, 1.5);
            await canvas.Translate(100, 100);
            await canvas.SetFillStyle("#3028A3");
            await canvas.FillRect(500, 10, 50, 50);
            await canvas.Transform(1, 0.2, 0.8, 1, 0, 0);
            await canvas.SetFillStyle("#A32830");
            await canvas.FillRect(400, 70, 50, 50);
            await canvas.SetTransform(1, 0.4, 0.6, 1, 0, 0);
            await canvas.SetFillStyle("#6735A8");
            await canvas.FillRect(250, 600, 50, 50);
            DOMMatrix? domMatrix1 = new(canvas);
            domMatrix1.a = 1;
            domMatrix1.b = 0.1;
            domMatrix1.c = 0.9;
            domMatrix1.d = 1;
            domMatrix1.e = 0;
            domMatrix1.f = 0;
            await canvas.SetTransform(domMatrix1);
            await canvas.SetFillStyle("#232830");
            await canvas.FillRect(150, 700, 50, 50);
            await canvas.ResetTransform();
            await canvas.Restore();
            #endregion

            #region Compositing
            await canvas.Save();
            await canvas.SetGlobalAlpha(0.5);
            double? globalAlpha = await canvas.GetGlobalAlpha();
            await canvas.FillText($"GlobalAlpha: {globalAlpha}", 600, 20);
            await canvas.SetGlobalCompositeOperation(GlobalCompositeOperationTypes.SourceOver);
            await canvas.SetFillStyle("#FF0000");
            await canvas.FillRect(10, 500, 50, 50);
            await canvas.SetFillStyle("#00FF00");
            await canvas.FillRect(30, 520, 50, 50);
            await canvas.Restore();
            #endregion

            #region Drawing images
            await canvas.DrawImage(imgRef, 10, 700);
            await canvas.DrawImage(imgRef, 250, 700, 64, 64);
            await canvas.DrawImage(imgRef, 10, 10, 50, 50, 250, 780, 50, 50);
            #endregion
        }
    }
}
