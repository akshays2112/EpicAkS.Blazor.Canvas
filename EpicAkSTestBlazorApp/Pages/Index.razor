@page "/"
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components
@using EpicAkS.Blazor.Canvas.Components
@using EpicAkS.Blazor.Canvas.Structs
@using EpicAkS.Blazor.Canvas.Enums
@using EpicAkS.Blazor.Canvas
@using static EpicAkS.Blazor.Canvas.Components.Helpers;
<CanvasComponent @ref="canvasComponent" Id="@Id" DrawWindow="@DrawWindow">
    <EpicAkS.Blazor.Canvas.Components.BasicControls.Button X="10" Y="600" Width="100" Height="50" Text="Button" ButtonColor="blue" CanvasComponent="@canvasComponent"
        MouseClick="@ButtonClick">
    </EpicAkS.Blazor.Canvas.Components.BasicControls.Button>
</CanvasComponent>
@code {
    private string Id = Guid.NewGuid().ToString();
    private CanvasComponent? canvasComponent;

    private async Task MyKeyPress(KeyboardEventTypes keyboardEventType, KeyboardEventArgs keyboardEventArgs)
    {
        if (canvasComponent?.CanvasComponentInfo?.Canvas is not null)
            await canvasComponent.CanvasComponentInfo.Canvas.StrokeRect(100, 100, 200, 200);
    }

    private async Task ButtonClick(MouseCoords mouseCoords)
    {
        if (canvasComponent?.CanvasComponentInfo?.Canvas is not null)
            await canvasComponent.CanvasComponentInfo.Canvas.StrokeRect((int)mouseCoords.OffsetLeft, (int)mouseCoords.OffsetTop, 200, 200);
    }

    public async Task DrawWindow(CanvasComponentInfo canvasComponentInfo)
    {
        if (canvasComponent is not null)
        {
            canvasComponent.WindowManager.RootWindow.KeyboardEvents.KeyPress += MyKeyPress;
        }
        if (canvasComponentInfo?.Canvas is not null)
        {
            CanvasClass canvas = canvasComponentInfo.Canvas;
            await canvas.ClearRect(0, 0, canvas.CanvasWidthHeightProp?.Width ?? 100,
                canvas.CanvasWidthHeightProp?.Height ?? 100);

            #region Drawing Rectangles
            await canvas.FillRect(10, 10, 50, 50);
            await canvas.ClearRect(40, 40, 10, 10);
            await canvas.StrokeRect(10, 70, 50, 50);
            #endregion

            #region Drawing Text
            await canvas.FillText("MAUI", 70, 20);
            await canvas.StrokeText("MAUI", 70, 50);
            TextMetrics? textMetrics = await canvas.MeasureTextAndReturnNewTextMetrics("MAUI");
            await canvas.FillText($"TextMetrics: {textMetrics?.Width}  VarId: {textMetrics?.VarIdString}", 70, 80);
            if (textMetrics is not null)
            {
                TextMetrics? textMetrics1 = await canvas.GetTextMetric(textMetrics);
                await canvas.FillText($"TextMetrics: {textMetrics?.Width}  VarId: {textMetrics1?.VarIdString}", 70, 110);
            }
            TextMetrics? textMetrics2 = await canvas.MeasureTextAndReturnNewFilledTextMetrics("MAUI");
            if (textMetrics2 is not null)
            {
                await canvas.FillText($"TextMetrics: {textMetrics2?.Width}  VarId: {textMetrics2?.VarIdString}", 70, 140);
            }
            #endregion

            #region Line styles
            double? lineWidth = await canvas.GetLineWidth();
            await canvas.FillText($"LineWidth: {lineWidth}", 70, 170);
            await canvas.SetLineWidth(5);
            double? lineWidth1 = await canvas.GetLineWidth();
            await canvas.FillText($"LineWidth: {lineWidth1}", 70, 200);
            LineCapTypes? lineCap = await canvas.GetLineCap();
            await canvas.FillText($"LineCap: {lineCap}", 70, 230);
            await canvas.SetLineCap(LineCapTypes.square);
            LineCapTypes? lineCap1 = await canvas.GetLineCap();
            await canvas.FillText($"LineCap: {lineCap1}", 70, 260);
            LineJoinTypes? lineJoin = await canvas.GetLineJoin();
            await canvas.FillText($"LineJoin: {lineJoin}", 70, 290);
            await canvas.SetLineJoin(LineJoinTypes.round);
            LineJoinTypes? lineJoin1 = await canvas.GetLineJoin();
            await canvas.FillText($"LineJoin: {lineJoin1}", 70, 320);
            double? miterLimit = await canvas.GetMiterLimit();
            await canvas.FillText($"MiterLimit: {miterLimit}", 70, 350);
            await canvas.SetMiterLimit(2);
            double? miterLimit1 = await canvas.GetMiterLimit();
            await canvas.FillText($"MiterLimit: {miterLimit1}", 70, 380);
            int?[]? lineDashes = await canvas.GetLineDash();
            if(lineDashes is not null)
                await canvas.FillText($"LineDashes: {{ {string.Join(", ", lineDashes)} }}", 70, 410);
            await canvas.SetLineDash(new int?[] { 10, 20 });
            int?[]? lineDashes1 = await canvas.GetLineDash();
            if(lineDashes1 is not null)
                await canvas.FillText($"LineDashes: {{ {string.Join(", ", lineDashes1)} }}", 70, 440);
            double? lineDashOffset = await canvas.GetLineDashOffset();
            await canvas.FillText($"LineDashOffset: {lineDashOffset}", 70, 470);
            await canvas.SetLineDashOffset(5);
            double? lineDashOffset1 = await canvas.GetLineDashOffset();
            await canvas.FillText($"LineDashOffset: {lineDashOffset1}", 70, 500);
            #endregion
        }
    }
}
