@page "/"
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components
@using static EpicAkS.Blazor.Canvas.Components.Helpers;
<CanvasComponent @ref="canvasComponent" Id="@Id" DrawWindow="@DrawWindow">
    <EpicAkS.Blazor.Canvas.Components.BasicControls.Button X="10" Y="600" Width="100" Height="50" Text="Akshay" ButtonColor="blue" CanvasComponent="@canvasComponent"
        MouseClick="@ButtonClick">
    </EpicAkS.Blazor.Canvas.Components.BasicControls.Button>
</CanvasComponent>
@code {
    string Id = Guid.NewGuid().ToString();
    private CanvasComponent canvasComponent;

    private async Task MyKeyPress(KeyboardEventTypes keyboardEventType, KeyboardEventArgs keyboardEventArgs)
    {
        if (canvasComponent?.CanvasComponentInfo?.Canvas is not null)
            await canvasComponent.CanvasComponentInfo.Canvas.StrokeRect(100, 100, 200, 200);
    }

    private async Task ButtonClick(MouseCoords mouseCoords)
    {
        if (canvasComponent?.CanvasComponentInfo?.Canvas is not null)
            await canvasComponent.CanvasComponentInfo.Canvas.StrokeRect((int)mouseCoords.OffsetLeft, (int)mouseCoords.OffsetTop, 200, 200);
    }

    public async Task DrawWindow(CanvasComponentInfo canvasComponentInfo)
    {
        if (canvasComponent is not null)
        {
            canvasComponent.WindowManager.RootWindow.KeyboardEvents.KeyPress += MyKeyPress;
        }
        if (canvasComponentInfo?.Canvas is not null)
        {
            CanvasClass canvas = canvasComponentInfo.Canvas;
            await canvas.ClearRect(0, 0, canvas.CanvasWidthHeightProp?.Width ?? 100,
                canvas.CanvasWidthHeightProp?.Height ?? 100);

            #region Drawing Rectangles
            await canvas.FillRect(10, 10, 50, 50);
            await canvas.ClearRect(40, 40, 10, 10);
            await canvas.StrokeRect(10, 70, 50, 50);
            #endregion

            #region Drawing Text
            await canvas.FillText("MAUI", 70, 20);
            await canvas.StrokeText("MAUI", 70, 50);
            TextMetrics textMetrics = await canvas.MeasureTextAndReturnNewTextMetrics("MAUI");
            await canvas.FillText($"TextMetrics: {textMetrics?.Width}  VarId: {textMetrics?.VarIdString}", 70, 80);
            if (textMetrics is not null)
            {
                TextMetrics textMetrics1 = await canvas.GetTextMetric(textMetrics);
                await canvas.FillText($"TextMetrics: {textMetrics?.Width}  VarId: {textMetrics1?.VarIdString}", 70, 110);
            }
            TextMetrics textMetrics2 = await canvas.MeasureTextAndReturnNewFilledTextMetrics("MAUI");
            if (textMetrics2 is not null)
            {
                await canvas.FillText($"TextMetrics: {textMetrics2?.Width}  VarId: {textMetrics2?.VarIdString}", 70, 140);
            }
            #endregion

            #region Line styles
            double? lineWidth = await canvas.GetLineWidth();
            await canvas.FillText($"LineWidth: {lineWidth}", 70, 170);
            await canvas.SetLineWidth(5);
            double? lineWidth1 = await canvas.GetLineWidth();
            await canvas.FillText($"LineWidth: {lineWidth1}", 70, 200);
            LineCapTypes? lineCap = await canvas.GetLineCap();
            await canvas.FillText($"LineCap: {lineCap}", 70, 230);
            await canvas.SetLineCap(LineCapTypes.square);
            LineCapTypes? lineCap1 = await canvas.GetLineCap();
            await canvas.FillText($"LineCap: {lineCap1}", 70, 260);
            LineJoinTypes? lineJoin = await canvas.GetLineJoin();
            await canvas.FillText($"LineJoin: {lineJoin}", 70, 290);
            await canvas.SetLineJoin(LineJoinTypes.round);
            LineJoinTypes? lineJoin1 = await canvas.GetLineJoin();
            await canvas.FillText($"LineJoin: {lineJoin1}", 70, 320);
            double? miterLimit = await canvas.GetMiterLimit();
            await canvas.FillText($"MiterLimit: {miterLimit}", 70, 350);
            await canvas.SetMiterLimit(2);
            double? miterLimit1 = await canvas.GetMiterLimit();
            await canvas.FillText($"MiterLimit: {miterLimit1}", 70, 380);
            int?[] lineDashes = await canvas.GetLineDash();
            if (lineDashes is not null)
                await canvas.FillText($"LineDashes: {{ {string.Join(", ", lineDashes)} }}", 70, 410);
            await canvas.SetLineDash(new int?[] { 10, 20 });
            int?[] lineDashes1 = await canvas.GetLineDash();
            if (lineDashes1 is not null)
                await canvas.FillText($"LineDashes: {{ {string.Join(", ", lineDashes1)} }}", 70, 440);
            double? lineDashOffset = await canvas.GetLineDashOffset();
            await canvas.FillText($"LineDashOffset: {lineDashOffset}", 70, 470);
            await canvas.SetLineDashOffset(5);
            double? lineDashOffset1 = await canvas.GetLineDashOffset();
            await canvas.FillText($"LineDashOffset: {lineDashOffset1}", 70, 500);
            #endregion

            #region Text styles
            string fontString = await canvas.GetFont();
            await canvas.FillText($"Font: {fontString}", 400, 20);
            await canvas.SetFont("10px Arial");
            string fontString1 = await canvas.GetFont();
            await canvas.FillText($"Font: {fontString1}", 400, 50);
            TextAlignTypes? textAlign = await canvas.GetTextAlign();
            await canvas.FillText($"TextAlign: {textAlign}", 400, 80);
            await canvas.SetTextAlign(TextAlignTypes.left);
            TextAlignTypes? textAlign1 = await canvas.GetTextAlign();
            await canvas.FillText($"TextAlign: {textAlign1}", 400, 110);
            TextBaselineTypes? textBaseline = await canvas.GetTextBaseline();
            await canvas.FillText($"TextBaseline: {textBaseline}", 400, 140);
            await canvas.SetTextBaseline(TextBaselineTypes.bottom);
            TextBaselineTypes? textBaseline1 = await canvas.GetTextBaseline();
            await canvas.FillText($"TextBaseline: {textBaseline1}", 400, 170);
            await canvas.SetTextBaseline(textBaseline);
            DirectionTypes? directionType = await canvas.GetDirection();
            await canvas.FillText($"Direction: {directionType}", 400, 200);
            await canvas.SetDirection(DirectionTypes.ltr);
            DirectionTypes? directionType1 = await canvas.GetDirection();
            await canvas.FillText($"Direction: {directionType1}", 400, 230);
            #endregion

            #region Fill and stroke styles
            Gradient gradient = new Gradient(canvas);
            await gradient.CreateConicGradient(45, 400, 260);
            await gradient.AddColorStop(0, "red");
            await gradient.AddColorStop(0.5, "green");
            await gradient.AddColorStop(1, "blue");
            await canvas.SetFillStyleWithCanvasGradient(gradient);
            await canvas.FillText($"Gradient set for fill style.", 400, 260);
            await canvas.SetFillStyle("red");
            string fillStyle1 = await canvas.GetFillStyle();
            await canvas.FillText($"FillStyle: {fillStyle1}", 400, 290);
            await canvas.SetStrokeStyleWithCanvasGradient(gradient);
            await canvas.FillText($"Gradient set for stroke style.", 400, 320);
            await canvas.SetStrokeStyle("green");
            string strokeStyle1 = await canvas.GetStrokeStyle();
            await canvas.FillText($"StrokeStyle: {strokeStyle1}", 400, 350);
            #endregion

            #region Shadows
            int? shadowBlur = await canvas.GetShadowBlur();
            await canvas.FillText($"ShadowBlur: {shadowBlur}", 400, 380);
            await canvas.SetShadowBlur(5);
            int? shadowBlur1 = await canvas.GetShadowBlur();
            await canvas.FillText($"ShadowBlur: {shadowBlur1}", 400, 410);
            string shadowColor = await canvas.GetShadowColor();
            await canvas.FillText($"ShadowColor: {shadowColor}", 400, 440);
            await canvas.SetShadowColor("blue");
            string shadowColor1 = await canvas.GetShadowColor();
            await canvas.FillText($"ShadowColor: {shadowColor1}", 400, 470);
            double? shadowOffsetX = await canvas.GetShadowOffsetX();
            await canvas.FillText($"ShadowOffsetX: {shadowOffsetX}", 400, 500);
            await canvas.SetShadowOffsetX(5);
            double? shadowOffsetX1 = await canvas.GetShadowOffsetX();
            await canvas.FillText($"ShadowOffsetX: {shadowOffsetX1}", 400, 530);
            double? shadowOffsetY = await canvas.GetShadowOffsetY();
            await canvas.FillText($"ShadowOffsetY: {shadowOffsetY}", 400, 560);
            await canvas.SetShadowOffsetY(5);
            double? shadowOffsetY1 = await canvas.GetShadowOffsetY();
            await canvas.FillText($"ShadowOffsetY: {shadowOffsetY1}", 400, 590);
            await canvas.SetShadowColor(shadowColor);
            await canvas.SetShadowOffsetX((float?)shadowOffsetX);
            await canvas.SetShadowOffsetY((float?)shadowOffsetY);
            #endregion
        }
    }
}
