@page "/"
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components
@using EpicAkS.Blazor.Canvas.Components
@using EpicAkS.Blazor.Canvas.Structs
@using EpicAkS.Blazor.Canvas.Enums
@using EpicAkS.Blazor.Canvas
<CanvasComponent Id="@Id" CallOnRender="@InitDraw"></CanvasComponent>
@code {
    string Id = Guid.NewGuid().ToString();
    EpicAkS.Blazor.Canvas.Components.Helpers.CanvasComponentInfo CanvasComponentInfo;

    private async Task MyMouseClick(MouseCoords mouseCoords)
    {
        if (CanvasComponentInfo?.Canvas is not null) await CanvasComponentInfo.Canvas.StrokeRect((int)mouseCoords.ClientX, (int)mouseCoords.ClientY, 200, 200);
    }

    private async Task InitDraw()
    {
        CanvasComponentInfo = EpicAkS.Blazor.Canvas.Components.Helpers.GetCanvasComponentInfoByIdGuid(Id);
        if (CanvasComponentInfo is not null) CanvasComponentInfo.CanvasComponentMouseEvents.MouseClick += MyMouseClick;
        if (CanvasComponentInfo?.Canvas is not null)
        {
            await CanvasComponentInfo.Canvas.ClearRect(0, 0, CanvasComponentInfo.Canvas.CanvasWidthHeightProp?.Width ?? 100,
                CanvasComponentInfo.Canvas.CanvasWidthHeightProp?.Height ?? 100);

            await CanvasComponentInfo.Canvas.SetFillStyle("rgba(255, 165, 0, 0.25)");
            await CanvasComponentInfo.Canvas.FillRect(10, 10, 100, 100);

            //Testing variable logic
            TextMetrics textMetrics = await CanvasComponentInfo.Canvas.MeasureTextAndReturnNewTextMetrics("akshay");
            TextMetrics textMetrics2 = null;
            if (textMetrics is not null)
                textMetrics2 = await CanvasComponentInfo.Canvas.GetTextMetric(textMetrics);
            TextMetrics textMetrics3;
            if (textMetrics2 is not null)
                textMetrics3 = await CanvasComponentInfo.Canvas.GetTextMetric(textMetrics2);

            //Testing enum logic
            await CanvasComponentInfo.Canvas.SetLineWidth(20);
            await CanvasComponentInfo.Canvas.SetLineJoin(LineJoinTypes.round);
            if (await CanvasComponentInfo.Canvas.GetLineJoin() == LineJoinTypes.round)
            {
                await CanvasComponentInfo.Canvas.BeginPath();
                await CanvasComponentInfo.Canvas.MoveTo(220, 20);
                await CanvasComponentInfo.Canvas.LineTo(390, 100);
                await CanvasComponentInfo.Canvas.LineTo(480, 20);
                await CanvasComponentInfo.Canvas.LineTo(480, 150);
                await CanvasComponentInfo.Canvas.Stroke();
            }

            //Testing class type vars ex. CanvasGradient
            Gradient gradient = new(CanvasComponentInfo.Canvas);
            await gradient.CreateConicGradient(0, 120, 320);
            await gradient.AddColorStop(0, "red");
            await gradient.AddColorStop(0.25, "orange");
            await gradient.AddColorStop(0.5, "yellow");
            await gradient.AddColorStop(0.75, "green");
            await gradient.AddColorStop(1, "blue");
            await CanvasComponentInfo.Canvas.SetFillStyleWithCanvasGradient(gradient);
            await CanvasComponentInfo.Canvas.FillRect(20, 220, 200, 200);

            Path2D path2D = new(CanvasComponentInfo.Canvas);
            await path2D.CreatePath2D();
            await path2D.Rect(300, 300, 100, 100);
            await CanvasComponentInfo.Canvas.SetFillStyle("magenta");
            await CanvasComponentInfo.Canvas.Fill(path2D);
        }
    }
}
